/*
 *  cool.cup
 *              Parser definition for the COOL language.
 *
 */

import java_cup.runtime.*;

/* Stuff enclosed in {: :} is copied verbatim to the class containing
all parser actions.  All the extra variables/functions you want to use
in the semantic actions should go here.  Don't remove or modify anything
that was there initially.  */

action code {: 

    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }
:} 

/************************************************************************/
/*                DONT CHANGE ANYTHING IN THIS SECTION                  */

parser code {:
    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }
:}

/* Declare the terminals; a few have types for associated lexemes.  The
token ERROR is never used in the parser; thus, it is a parse error when
the lexer returns it.  */

terminal CLASS, ELSE, FI, IF, IN, INHERITS, LET, LET_STMT, LOOP, POOL, THEN, WHILE;
terminal CASE, ESAC, OF, DARROW, NEW, ISVOID;
terminal ASSIGN, NOT, LE, ERROR;
terminal PLUS, DIV, MINUS, MULT, EQ, LT, DOT, NEG, COMMA, SEMI, COLON;
terminal LPAREN, RPAREN, AT, LBRACE, RBRACE;
terminal AbstractSymbol STR_CONST, INT_CONST;
terminal Boolean BOOL_CONST;
terminal AbstractSymbol TYPEID, OBJECTID;

/*  DON'T CHANGE ANYTHING ABOVE THIS LINE, OR YOUR PARSER WONT WORK       */
/**************************************************************************/

/* Complete the nonterminal list below, giving a type for the semantic
  value of each non terminal. (See the CUP documentation for details. */

nonterminal programc program;
nonterminal Classes class_list;
nonterminal class_c class;
nonterminal Features feature_list;
nonterminal Feature feature;
nonterminal Formals formal_list;
nonterminal formalc formal;
nonterminal Expression expression;
nonterminal Expressions expression_list;
nonterminal Expressions expression_list_block;
nonterminal Cases cases;
nonterminal Case case;
nonterminal Expression ins;

/* Precedence declarations go here. */
precedence right ASSIGN;
precedence right NOT;
precedence nonassoc LT, LE, EQ;
precedence left PLUS, MINUS;
precedence left MULT, DIV;
precedence right ISVOID;
precedence right NEG;
precedence left DOT;

program	
	::= class_list:cl
	    {: RESULT = new programc(curr_lineno(), cl); :}
        ;

class_list
	/* single class */
	::= class:c
	    {: RESULT = (new Classes(curr_lineno())).appendElement(c); :}
	/* several classes */
	| class_list:cl class:c
	    {: RESULT = cl.appendElement(c); :}
	;

/* If no parent is specified, the class inherits from the Object class */
class
	::= CLASS TYPEID:n LBRACE feature_list:f RBRACE SEMI:s
	    {: RESULT = new class_c(curr_lineno(), n, 
		                   AbstractTable.idtable.addString("Object"), 
				   f, curr_filename()); :}
	| CLASS TYPEID:n INHERITS TYPEID:p LBRACE feature_list:f RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n, p, f, curr_filename()); :}
	| CLASS TYPEID:n LBRACE RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n, 
		                   AbstractTable.idtable.addString("Object"), 
				   new Features(curr_lineno()), curr_filename()); :}
	| CLASS TYPEID:n INHERITS TYPEID:p LBRACE RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n, p,
                new Features(curr_lineno()), curr_filename()); :}
        | error
          {: :}
	;

feature_list
        /* feature list */
        ::= feature:f SEMI
            {: RESULT = (new Features(curr_lineno())).appendElement(f); :}
        | feature_list:fl feature:f SEMI
            {: RESULT = fl.appendElement(f); :}
        ;

feature
        /* feature */
        ::= OBJECTID:o LPAREN formal_list:fl RPAREN COLON TYPEID:n
        LBRACE expression:e RBRACE
            {: RESULT = (new method(curr_lineno(), o, fl, n, e)); :}
        | OBJECTID:o COLON TYPEID:n
            {: RESULT = (new attr(curr_lineno(), o, n, new
                  no_expr(curr_lineno()))); :}
        | OBJECTID:o COLON TYPEID:n ASSIGN expression:e
            {: RESULT = (new attr(curr_lineno(), o, n, e)); :}
        | error
            {: :}
        ;

formal_list
        ::=
          {: RESULT = (new Formals(curr_lineno())); :}
        | formal:f
          {: RESULT = (new Formals(curr_lineno())).appendElement(f); :}
        | formal_list:fl COMMA formal:f
          {: RESULT = fl.appendElement(f); :}
        ;
formal
        ::= OBJECTID:o COLON TYPEID:n
          {: RESULT = (new formalc(curr_lineno(), o, n)); :}
        ;

expression_list_block
        ::= expression:e SEMI
          {: RESULT = (new Expressions(curr_lineno())).appendElement(e); :}
        | expression_list_block:el expression:e SEMI
          {: RESULT = el.appendElement(e); :}
        | expression_list_block:el error SEMI
          {: :}
        ;
expression_list
        ::=
          {: RESULT = (new Expressions(curr_lineno())); :}
        | expression:e
          {: RESULT = (new Expressions(curr_lineno())).appendElement(e); :}
        | expression_list:el COMMA expression:e
          {: RESULT = el.appendElement(e); :}
        ;

cases
        ::= case:c
          {: RESULT = (new Cases(curr_lineno())).appendElement(c); :}
        | cases:cs case:c
          {: RESULT = cs.appendElement(c); :}
        ;
case
        ::= OBJECTID:o COLON TYPEID:t DARROW expression:e SEMI
          {: RESULT = (new branch(curr_lineno(), o, t, e)); :}
        ;

ins
        ::= COMMA OBJECTID:o COLON TYPEID:t IN expression:e
          {: RESULT = (new let(curr_lineno(), o, t, new no_expr(curr_lineno()), e)); :}
        | COMMA OBJECTID:o COLON TYPEID:t ASSIGN expression:e1 IN expression:e2
          {: RESULT = (new let(curr_lineno(), o, t, e1, e2)); :}
        | COMMA OBJECTID:o COLON TYPEID:t ins:i
          {: RESULT = (new let(curr_lineno(), o, t, new no_expr(curr_lineno()), i)); :}
        | COMMA OBJECTID:o COLON TYPEID:t ASSIGN expression:e ins:i
          {: RESULT = (new let(curr_lineno(), o, t, e, i)); :}
        ;

expression
        ::= OBJECTID:o ASSIGN expression:e
          {: RESULT = (new assign(curr_lineno(), o, e)); :}
        | expression:e DOT OBJECTID:o LPAREN expression_list:el RPAREN
          {: RESULT = (new dispatch(curr_lineno(), e, o, el)); :}
        | expression:e AT TYPEID:t DOT OBJECTID:o LPAREN expression_list:el RPAREN
          {: RESULT = (new static_dispatch(curr_lineno(), e, t, o, el)); :}
        | OBJECTID:o LPAREN expression_list:el RPAREN
          {: RESULT = (new dispatch(curr_lineno(),
                new object(curr_lineno(), AbstractTable.idtable.addString("self")),
                o, el)); :}
        | IF expression:e1 THEN expression:e2 ELSE expression:e3 FI
          {: RESULT = (new cond(curr_lineno(), e1, e2, e3)); :}
        | WHILE expression:e1 LOOP expression:e2 POOL
          {: RESULT = (new loop(curr_lineno(), e1, e2)); :}
        | LBRACE expression_list_block:el RBRACE
          {: RESULT = (new block(curr_lineno(), el)); :}
        | LET OBJECTID:o COLON TYPEID:t IN expression:e
          {: RESULT = (new let(curr_lineno(), o, t, new no_expr(curr_lineno()), e)); :}
        | LET OBJECTID:o COLON TYPEID:t ASSIGN expression:e1 IN expression:e2
          {: RESULT = (new let(curr_lineno(), o, t, e1, e2)); :}
        | LET OBJECTID:o COLON TYPEID:t ins:i
          {: RESULT = (new let(curr_lineno(), o, t, new no_expr(curr_lineno()), i)); :}
        | LET OBJECTID:o COLON TYPEID:t ASSIGN expression:e ins:i
          {: RESULT = (new let(curr_lineno(), o, t, e, i)); :}
        | CASE expression:e OF cases:cs ESAC
          {: RESULT = (new typcase(curr_lineno(), e, cs)); :}
        | NEW TYPEID:t
          {: RESULT = (new new_(curr_lineno(), t)); :}
        | ISVOID expression:e
          {: RESULT = (new isvoid(curr_lineno(), e)); :}
        | expression:e1 PLUS expression:e2
          {: RESULT = (new plus(curr_lineno(), e1, e2)); :}
        | expression:e1 MULT expression:e2
          {: RESULT = (new mul(curr_lineno(), e1, e2)); :}
        | expression:e1 MINUS expression:e2
          {: RESULT = (new sub(curr_lineno(), e1, e2)); :}
        | expression:e1 DIV expression:e2
          {: RESULT = (new divide(curr_lineno(), e1, e2)); :}
        | NEG expression:e
          {: RESULT = (new neg(curr_lineno(), e)); :}
        | expression:e1 LT expression:e2
          {: RESULT = (new lt(curr_lineno(), e1, e2)); :}
        | expression:e1 LE expression:e2
          {: RESULT = (new leq(curr_lineno(), e1, e2)); :}
        | expression:e1 EQ expression:e2
          {: RESULT = (new eq(curr_lineno(), e1, e2)); :}
        | NOT expression:e
          {: RESULT = (new comp(curr_lineno(), e)); :}
        | LPAREN expression:e RPAREN
          {: RESULT = e; :}
        | OBJECTID:o
          {: RESULT = (new object(curr_lineno(), o)); :}
        | INT_CONST:i
          {: RESULT = (new int_const(curr_lineno(), i)); :}
        | STR_CONST:s
          {: RESULT = (new string_const(curr_lineno(), s)); :}
        | BOOL_CONST:b
          {: RESULT = (new bool_const(curr_lineno(), b)); :}
        | WHILE expression:e1 LOOP expression:e2  error
          {:  :}
        | WHILE expression:e1 error expression:e2 POOL
          {:  :}
        | error
          {:  :}
        ;
