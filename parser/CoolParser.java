
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sat Feb 18 15:08:47 PST 2017
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Sat Feb 18 15:08:47 PST 2017
  */
public class CoolParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CoolParser() {super();}

  /** Constructor which sets the default scanner. */
  public CoolParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\003\003\000\002\002\004\000\002\004" +
    "\003\000\002\004\004\000\002\005\010\000\002\005\012" +
    "\000\002\005\007\000\002\005\011\000\002\005\003\000" +
    "\002\006\004\000\002\006\005\000\002\007\013\000\002" +
    "\007\005\000\002\007\007\000\002\007\003\000\002\010" +
    "\002\000\002\010\003\000\002\010\005\000\002\011\005" +
    "\000\002\014\004\000\002\014\005\000\002\014\005\000" +
    "\002\013\002\000\002\013\003\000\002\013\005\000\002" +
    "\015\003\000\002\015\004\000\002\016\010\000\002\017" +
    "\010\000\002\017\012\000\002\017\007\000\002\017\011" +
    "\000\002\012\005\000\002\012\010\000\002\012\012\000" +
    "\002\012\006\000\002\012\011\000\002\012\007\000\002" +
    "\012\005\000\002\012\010\000\002\012\012\000\002\012" +
    "\007\000\002\012\011\000\002\012\007\000\002\012\004" +
    "\000\002\012\004\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\004\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\004\000\002\012\005\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\007\000" +
    "\002\012\007\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\237\000\006\003\006\004\010\001\002\000\010\002" +
    "\001\003\006\004\010\001\002\000\004\002\240\001\002" +
    "\000\010\002\ufff9\003\ufff9\004\ufff9\001\002\000\010\002" +
    "\uffff\003\uffff\004\uffff\001\002\000\004\055\011\001\002" +
    "\000\006\011\013\050\012\001\002\000\010\003\016\051" +
    "\234\056\021\001\002\000\004\055\014\001\002\000\004" +
    "\050\015\001\002\000\010\003\016\051\022\056\021\001" +
    "\002\000\004\043\ufff3\001\002\000\004\043\232\001\002" +
    "\000\010\003\016\051\227\056\021\001\002\000\006\044" +
    "\024\045\025\001\002\000\004\043\023\001\002\000\010" +
    "\002\ufffa\003\ufffa\004\ufffa\001\002\000\004\055\223\001" +
    "\002\000\010\042\ufff2\046\ufff2\056\027\001\002\000\006" +
    "\042\033\046\034\001\002\000\004\044\031\001\002\000" +
    "\006\042\ufff1\046\ufff1\001\002\000\004\055\032\001\002" +
    "\000\006\042\uffef\046\uffef\001\002\000\004\056\027\001" +
    "\002\000\004\044\035\001\002\000\004\055\036\001\002" +
    "\000\004\050\037\001\002\000\040\003\051\007\046\012" +
    "\056\017\041\020\053\024\042\025\050\027\054\041\055" +
    "\045\057\050\040\052\044\053\043\054\045\056\052\001" +
    "\002\000\040\003\051\007\046\012\056\017\041\020\053" +
    "\024\042\025\050\027\054\041\055\045\057\050\040\052" +
    "\044\053\043\054\045\056\052\001\002\000\040\003\051" +
    "\007\046\012\056\017\041\020\053\024\042\025\050\027" +
    "\054\041\055\045\057\050\040\052\044\053\043\054\045" +
    "\056\052\001\002\000\004\055\201\001\002\000\054\003" +
    "\uffc8\005\uffc8\006\uffc8\010\uffc8\014\uffc8\015\uffc8\016\uffc8" +
    "\022\uffc8\030\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036" +
    "\uffc8\037\uffc8\040\uffc8\042\uffc8\043\uffc8\046\uffc8\047\uffc8" +
    "\051\uffc8\001\002\000\054\003\uffc7\005\uffc7\006\uffc7\010" +
    "\uffc7\014\uffc7\015\uffc7\016\uffc7\022\uffc7\030\uffc7\032\uffc7" +
    "\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\042" +
    "\uffc7\043\uffc7\046\uffc7\047\uffc7\051\uffc7\001\002\000\054" +
    "\003\uffc6\005\uffc6\006\uffc6\010\uffc6\014\uffc6\015\uffc6\016" +
    "\uffc6\022\uffc6\030\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6" +
    "\036\uffc6\037\uffc6\040\uffc6\042\uffc6\043\uffc6\046\uffc6\047" +
    "\uffc6\051\uffc6\001\002\000\040\003\051\007\046\012\056" +
    "\017\041\020\053\024\042\025\050\027\054\041\055\045" +
    "\057\050\040\052\044\053\043\054\045\056\052\001\002" +
    "\000\026\030\065\032\063\033\066\034\061\035\062\036" +
    "\064\037\072\040\067\047\071\051\172\001\002\000\040" +
    "\003\051\007\046\012\056\017\041\020\053\024\042\025" +
    "\050\027\054\041\055\045\057\050\040\052\044\053\043" +
    "\054\045\056\052\001\002\000\054\003\uffc3\005\uffc3\006" +
    "\uffc3\010\uffc3\014\uffc3\015\uffc3\016\uffc3\022\uffc3\030\uffc3" +
    "\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040" +
    "\uffc3\042\uffc3\043\uffc3\046\uffc3\047\uffc3\051\uffc3\001\002" +
    "\000\060\003\uffc9\005\uffc9\006\uffc9\010\uffc9\014\uffc9\015" +
    "\uffc9\016\uffc9\022\uffc9\026\165\030\uffc9\032\uffc9\033\uffc9" +
    "\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\042\uffc9\043" +
    "\uffc9\045\164\046\uffc9\047\uffc9\051\uffc9\001\002\000\040" +
    "\003\051\007\046\012\056\017\041\020\053\024\042\025" +
    "\050\027\054\041\055\045\057\050\040\052\044\053\043" +
    "\054\045\056\052\001\002\000\040\003\051\007\046\012" +
    "\056\017\041\020\053\024\042\025\050\027\054\041\055" +
    "\045\057\050\040\052\044\053\043\054\045\056\052\001" +
    "\002\000\040\003\051\007\046\012\056\017\041\020\053" +
    "\024\042\025\050\027\054\041\055\045\057\050\040\052" +
    "\044\053\043\054\045\056\052\001\002\000\004\056\117" +
    "\001\002\000\040\003\051\007\046\012\056\017\041\020" +
    "\053\024\042\025\050\027\054\041\055\045\057\050\040" +
    "\052\044\053\043\054\045\056\052\001\002\000\026\030" +
    "\065\032\063\033\066\034\061\035\062\036\064\037\072" +
    "\040\067\046\070\047\071\001\002\000\040\003\051\007" +
    "\046\012\056\017\041\020\053\024\042\025\050\027\054" +
    "\041\055\045\057\050\040\052\044\053\043\054\045\056" +
    "\052\001\002\000\040\003\051\007\046\012\056\017\041" +
    "\020\053\024\042\025\050\027\054\041\055\045\057\050" +
    "\040\052\044\053\043\054\045\056\052\001\002\000\040" +
    "\003\051\007\046\012\056\017\041\020\053\024\042\025" +
    "\050\027\054\041\055\045\057\050\040\052\044\053\043" +
    "\054\045\056\052\001\002\000\040\003\051\007\046\012" +
    "\056\017\041\020\053\024\042\025\050\027\054\041\055" +
    "\045\057\050\040\052\044\053\043\054\045\056\052\001" +
    "\002\000\040\003\051\007\046\012\056\017\041\020\053" +
    "\024\042\025\050\027\054\041\055\045\057\050\040\052" +
    "\044\053\043\054\045\056\052\001\002\000\040\003\051" +
    "\007\046\012\056\017\041\020\053\024\042\025\050\027" +
    "\054\041\055\045\057\050\040\052\044\053\043\054\045" +
    "\056\052\001\002\000\004\056\105\001\002\000\054\003" +
    "\uffca\005\uffca\006\uffca\010\uffca\014\uffca\015\uffca\016\uffca" +
    "\022\uffca\030\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036" +
    "\uffca\037\uffca\040\uffca\042\uffca\043\uffca\046\uffca\047\uffca" +
    "\051\uffca\001\002\000\004\055\074\001\002\000\040\003" +
    "\051\007\046\012\056\017\041\020\053\024\042\025\050" +
    "\027\054\041\055\045\057\050\040\052\044\053\043\054" +
    "\045\056\052\001\002\000\046\003\uffce\005\uffce\006\uffce" +
    "\010\uffce\014\uffce\015\uffce\016\uffce\022\uffce\032\063\033" +
    "\066\034\061\035\062\040\067\042\uffce\043\uffce\046\uffce" +
    "\047\uffce\051\uffce\001\002\000\004\040\075\001\002\000" +
    "\004\056\076\001\002\000\004\045\077\001\002\000\044" +
    "\003\051\007\046\012\056\017\041\020\053\024\042\025" +
    "\050\027\054\041\055\042\uffeb\045\057\046\uffeb\050\040" +
    "\052\044\053\043\054\045\056\052\001\002\000\030\030" +
    "\065\032\063\033\066\034\061\035\062\036\064\037\072" +
    "\040\067\042\uffea\046\uffea\047\071\001\002\000\006\042" +
    "\102\046\103\001\002\000\040\003\051\007\046\012\056" +
    "\017\041\020\053\024\042\025\050\027\054\041\055\045" +
    "\057\050\040\052\044\053\043\054\045\056\052\001\002" +
    "\000\054\003\uffdf\005\uffdf\006\uffdf\010\uffdf\014\uffdf\015" +
    "\uffdf\016\uffdf\022\uffdf\030\uffdf\032\uffdf\033\uffdf\034\uffdf" +
    "\035\uffdf\036\uffdf\037\uffdf\040\uffdf\042\uffdf\043\uffdf\046" +
    "\uffdf\047\uffdf\051\uffdf\001\002\000\030\030\065\032\063" +
    "\033\066\034\061\035\062\036\064\037\072\040\067\042" +
    "\uffe9\046\uffe9\047\071\001\002\000\004\045\106\001\002" +
    "\000\044\003\051\007\046\012\056\017\041\020\053\024" +
    "\042\025\050\027\054\041\055\042\uffeb\045\057\046\uffeb" +
    "\050\040\052\044\053\043\054\045\056\052\001\002\000" +
    "\006\042\102\046\110\001\002\000\054\003\uffe0\005\uffe0" +
    "\006\uffe0\010\uffe0\014\uffe0\015\uffe0\016\uffe0\022\uffe0\030" +
    "\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0" +
    "\040\uffe0\042\uffe0\043\uffe0\046\uffe0\047\uffe0\051\uffe0\001" +
    "\002\000\054\003\uffd0\005\uffd0\006\uffd0\010\uffd0\014\uffd0" +
    "\015\uffd0\016\uffd0\022\uffd0\030\uffd0\032\uffd0\033\uffd0\034" +
    "\uffd0\035\uffd0\036\uffd0\037\uffd0\040\067\042\uffd0\043\uffd0" +
    "\046\uffd0\047\uffd0\051\uffd0\001\002\000\046\003\uffcd\005" +
    "\uffcd\006\uffcd\010\uffcd\014\uffcd\015\uffcd\016\uffcd\022\uffcd" +
    "\032\063\033\066\034\061\035\062\040\067\042\uffcd\043" +
    "\uffcd\046\uffcd\047\uffcd\051\uffcd\001\002\000\046\003\uffcc" +
    "\005\uffcc\006\uffcc\010\uffcc\014\uffcc\015\uffcc\016\uffcc\022" +
    "\uffcc\032\063\033\066\034\061\035\062\040\067\042\uffcc" +
    "\043\uffcc\046\uffcc\047\uffcc\051\uffcc\001\002\000\054\003" +
    "\uffd3\005\uffd3\006\uffd3\010\uffd3\014\uffd3\015\uffd3\016\uffd3" +
    "\022\uffd3\030\uffd3\032\uffd3\033\066\034\uffd3\035\062\036" +
    "\uffd3\037\uffd3\040\067\042\uffd3\043\uffd3\046\uffd3\047\uffd3" +
    "\051\uffd3\001\002\000\054\003\uffd2\005\uffd2\006\uffd2\010" +
    "\uffd2\014\uffd2\015\uffd2\016\uffd2\022\uffd2\030\uffd2\032\uffd2" +
    "\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\067\042" +
    "\uffd2\043\uffd2\046\uffd2\047\uffd2\051\uffd2\001\002\000\054" +
    "\003\uffd1\005\uffd1\006\uffd1\010\uffd1\014\uffd1\015\uffd1\016" +
    "\uffd1\022\uffd1\030\uffd1\032\uffd1\033\066\034\uffd1\035\062" +
    "\036\uffd1\037\uffd1\040\067\042\uffd1\043\uffd1\046\uffd1\047" +
    "\uffd1\051\uffd1\001\002\000\004\044\120\001\002\000\004" +
    "\055\121\001\002\000\010\010\123\026\125\042\122\001" +
    "\002\000\004\056\133\001\002\000\040\003\051\007\046" +
    "\012\056\017\041\020\053\024\042\025\050\027\054\041" +
    "\055\045\057\050\040\052\044\053\043\054\045\056\052" +
    "\001\002\000\054\003\uffd8\005\uffd8\006\uffd8\010\uffd8\014" +
    "\uffd8\015\uffd8\016\uffd8\022\uffd8\030\uffd8\032\uffd8\033\uffd8" +
    "\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\042\uffd8\043" +
    "\uffd8\046\uffd8\047\uffd8\051\uffd8\001\002\000\040\003\051" +
    "\007\046\012\056\017\041\020\053\024\042\025\050\027" +
    "\054\041\055\045\057\050\040\052\044\053\043\054\045" +
    "\056\052\001\002\000\030\010\127\030\065\032\063\033" +
    "\066\034\061\035\062\036\064\037\072\040\067\042\122" +
    "\047\071\001\002\000\040\003\051\007\046\012\056\017" +
    "\041\020\053\024\042\025\050\027\054\041\055\045\057" +
    "\050\040\052\044\053\043\054\045\056\052\001\002\000" +
    "\054\003\uffd7\005\uffd7\006\uffd7\010\uffd7\014\uffd7\015\uffd7" +
    "\016\uffd7\022\uffd7\030\uffd7\032\uffd7\033\uffd7\034\uffd7\035" +
    "\uffd7\036\uffd7\037\uffd7\040\uffd7\042\uffd7\043\uffd7\046\uffd7" +
    "\047\uffd7\051\uffd7\001\002\000\054\003\uffd9\005\uffd9\006" +
    "\uffd9\010\uffd9\014\uffd9\015\uffd9\016\uffd9\022\uffd9\030\065" +
    "\032\063\033\066\034\061\035\062\036\064\037\072\040" +
    "\067\042\uffd9\043\uffd9\046\uffd9\047\071\051\uffd9\001\002" +
    "\000\054\003\uffda\005\uffda\006\uffda\010\uffda\014\uffda\015" +
    "\uffda\016\uffda\022\uffda\030\065\032\063\033\066\034\061" +
    "\035\062\036\064\037\072\040\067\042\uffda\043\uffda\046" +
    "\uffda\047\071\051\uffda\001\002\000\004\044\134\001\002" +
    "\000\004\055\135\001\002\000\010\010\136\026\140\042" +
    "\122\001\002\000\040\003\051\007\046\012\056\017\041" +
    "\020\053\024\042\025\050\027\054\041\055\045\057\050" +
    "\040\052\044\053\043\054\045\056\052\001\002\000\054" +
    "\003\uffe3\005\uffe3\006\uffe3\010\uffe3\014\uffe3\015\uffe3\016" +
    "\uffe3\022\uffe3\030\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3" +
    "\036\uffe3\037\uffe3\040\uffe3\042\uffe3\043\uffe3\046\uffe3\047" +
    "\uffe3\051\uffe3\001\002\000\040\003\051\007\046\012\056" +
    "\017\041\020\053\024\042\025\050\027\054\041\055\045" +
    "\057\050\040\052\044\053\043\054\045\056\052\001\002" +
    "\000\030\010\142\030\065\032\063\033\066\034\061\035" +
    "\062\036\064\037\072\040\067\042\122\047\071\001\002" +
    "\000\040\003\051\007\046\012\056\017\041\020\053\024" +
    "\042\025\050\027\054\041\055\045\057\050\040\052\044" +
    "\053\043\054\045\056\052\001\002\000\054\003\uffe2\005" +
    "\uffe2\006\uffe2\010\uffe2\014\uffe2\015\uffe2\016\uffe2\022\uffe2" +
    "\030\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037" +
    "\uffe2\040\uffe2\042\uffe2\043\uffe2\046\uffe2\047\uffe2\051\uffe2" +
    "\001\002\000\054\003\uffe4\005\uffe4\006\uffe4\010\uffe4\014" +
    "\uffe4\015\uffe4\016\uffe4\022\uffe4\030\065\032\063\033\066" +
    "\034\061\035\062\036\064\037\072\040\067\042\uffe4\043" +
    "\uffe4\046\uffe4\047\071\051\uffe4\001\002\000\054\003\uffe5" +
    "\005\uffe5\006\uffe5\010\uffe5\014\uffe5\015\uffe5\016\uffe5\022" +
    "\uffe5\030\065\032\063\033\066\034\061\035\062\036\064" +
    "\037\072\040\067\042\uffe5\043\uffe5\046\uffe5\047\071\051" +
    "\uffe5\001\002\000\054\003\uffcf\005\uffcf\006\uffcf\010\uffcf" +
    "\014\uffcf\015\uffcf\016\uffcf\022\uffcf\030\uffcf\032\uffcf\033" +
    "\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\067\042\uffcf" +
    "\043\uffcf\046\uffcf\047\uffcf\051\uffcf\001\002\000\054\003" +
    "\uffcb\005\uffcb\006\uffcb\010\uffcb\014\uffcb\015\uffcb\016\uffcb" +
    "\022\uffcb\030\065\032\063\033\066\034\061\035\062\036" +
    "\064\037\072\040\067\042\uffcb\043\uffcb\046\uffcb\047\uffcb" +
    "\051\uffcb\001\002\000\026\022\151\030\065\032\063\033" +
    "\066\034\061\035\062\036\064\037\072\040\067\047\071" +
    "\001\002\000\004\056\153\001\002\000\006\021\uffe8\056" +
    "\uffe8\001\002\000\004\044\157\001\002\000\006\021\156" +
    "\056\153\001\002\000\006\021\uffe7\056\uffe7\001\002\000" +
    "\054\003\uffd6\005\uffd6\006\uffd6\010\uffd6\014\uffd6\015\uffd6" +
    "\016\uffd6\022\uffd6\030\uffd6\032\uffd6\033\uffd6\034\uffd6\035" +
    "\uffd6\036\uffd6\037\uffd6\040\uffd6\042\uffd6\043\uffd6\046\uffd6" +
    "\047\uffd6\051\uffd6\001\002\000\004\055\160\001\002\000" +
    "\004\023\161\001\002\000\040\003\051\007\046\012\056" +
    "\017\041\020\053\024\042\025\050\027\054\041\055\045" +
    "\057\050\040\052\044\053\043\054\045\056\052\001\002" +
    "\000\026\030\065\032\063\033\066\034\061\035\062\036" +
    "\064\037\072\040\067\043\163\047\071\001\002\000\006" +
    "\021\uffe6\056\uffe6\001\002\000\044\003\051\007\046\012" +
    "\056\017\041\020\053\024\042\025\050\027\054\041\055" +
    "\042\uffeb\045\057\046\uffeb\050\040\052\044\053\043\054" +
    "\045\056\052\001\002\000\040\003\051\007\046\012\056" +
    "\017\041\020\053\024\042\025\050\027\054\041\055\045" +
    "\057\050\040\052\044\053\043\054\045\056\052\001\002" +
    "\000\054\003\uffe1\005\uffe1\006\uffe1\010\uffe1\014\uffe1\015" +
    "\uffe1\016\uffe1\022\uffe1\030\065\032\063\033\066\034\061" +
    "\035\062\036\064\037\072\040\067\042\uffe1\043\uffe1\046" +
    "\uffe1\047\uffe1\051\uffe1\001\002\000\006\042\102\046\170" +
    "\001\002\000\054\003\uffde\005\uffde\006\uffde\010\uffde\014" +
    "\uffde\015\uffde\016\uffde\022\uffde\030\uffde\032\uffde\033\uffde" +
    "\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\042\uffde\043" +
    "\uffde\046\uffde\047\uffde\051\uffde\001\002\000\054\003\uffd4" +
    "\005\uffd4\006\uffd4\010\uffd4\014\uffd4\015\uffd4\016\uffd4\022" +
    "\uffd4\030\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4" +
    "\037\uffd4\040\067\042\uffd4\043\uffd4\046\uffd4\047\uffd4\051" +
    "\uffd4\001\002\000\004\043\ufff6\001\002\000\026\016\174" +
    "\030\065\032\063\033\066\034\061\035\062\036\064\037" +
    "\072\040\067\047\071\001\002\000\040\003\051\007\046" +
    "\012\056\017\041\020\053\024\042\025\050\027\054\041" +
    "\055\045\057\050\040\052\044\053\043\054\045\056\052" +
    "\001\002\000\026\005\176\030\065\032\063\033\066\034" +
    "\061\035\062\036\064\037\072\040\067\047\071\001\002" +
    "\000\040\003\051\007\046\012\056\017\041\020\053\024" +
    "\042\025\050\027\054\041\055\045\057\050\040\052\044" +
    "\053\043\054\045\056\052\001\002\000\026\006\200\030" +
    "\065\032\063\033\066\034\061\035\062\036\064\037\072" +
    "\040\067\047\071\001\002\000\054\003\uffdd\005\uffdd\006" +
    "\uffdd\010\uffdd\014\uffdd\015\uffdd\016\uffdd\022\uffdd\030\uffdd" +
    "\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040" +
    "\uffdd\042\uffdd\043\uffdd\046\uffdd\047\uffdd\051\uffdd\001\002" +
    "\000\054\003\uffd5\005\uffd5\006\uffd5\010\uffd5\014\uffd5\015" +
    "\uffd5\016\uffd5\022\uffd5\030\uffd5\032\uffd5\033\uffd5\034\uffd5" +
    "\035\uffd5\036\uffd5\037\uffd5\040\uffd5\042\uffd5\043\uffd5\046" +
    "\uffd5\047\uffd5\051\uffd5\001\002\000\030\003\204\014\203" +
    "\030\065\032\063\033\066\034\061\035\062\036\064\037" +
    "\072\040\067\047\071\001\002\000\040\003\051\007\046" +
    "\012\056\017\041\020\053\024\042\025\050\027\054\041" +
    "\055\045\057\050\040\052\044\053\043\054\045\056\052" +
    "\001\002\000\040\003\051\007\046\012\056\017\041\020" +
    "\053\024\042\025\050\027\054\041\055\045\057\050\040" +
    "\052\044\053\043\054\045\056\052\001\002\000\026\015" +
    "\206\030\065\032\063\033\066\034\061\035\062\036\064" +
    "\037\072\040\067\047\071\001\002\000\054\003\uffc4\005" +
    "\uffc4\006\uffc4\010\uffc4\014\uffc4\015\uffc4\016\uffc4\022\uffc4" +
    "\030\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037" +
    "\uffc4\040\uffc4\042\uffc4\043\uffc4\046\uffc4\047\uffc4\051\uffc4" +
    "\001\002\000\030\003\211\015\210\030\065\032\063\033" +
    "\066\034\061\035\062\036\064\037\072\040\067\047\071" +
    "\001\002\000\054\003\uffdc\005\uffdc\006\uffdc\010\uffdc\014" +
    "\uffdc\015\uffdc\016\uffdc\022\uffdc\030\uffdc\032\uffdc\033\uffdc" +
    "\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\042\uffdc\043" +
    "\uffdc\046\uffdc\047\uffdc\051\uffdc\001\002\000\054\003\uffc5" +
    "\005\uffc5\006\uffc5\010\uffc5\014\uffc5\015\uffc5\016\uffc5\022" +
    "\uffc5\030\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5" +
    "\037\uffc5\040\uffc5\042\uffc5\043\uffc5\046\uffc5\047\uffc5\051" +
    "\uffc5\001\002\000\026\030\065\032\063\033\066\034\061" +
    "\035\062\036\064\037\072\040\067\043\221\047\071\001" +
    "\002\000\042\003\215\007\046\012\056\017\041\020\053" +
    "\024\042\025\050\027\054\041\055\045\057\050\040\051" +
    "\216\052\044\053\043\054\045\056\052\001\002\000\026" +
    "\030\065\032\063\033\066\034\061\035\062\036\064\037" +
    "\072\040\067\043\220\047\071\001\002\000\026\030\uffc3" +
    "\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040" +
    "\uffc3\043\217\047\uffc3\001\002\000\054\003\uffdb\005\uffdb" +
    "\006\uffdb\010\uffdb\014\uffdb\015\uffdb\016\uffdb\022\uffdb\030" +
    "\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb" +
    "\040\uffdb\042\uffdb\043\uffdb\046\uffdb\047\uffdb\051\uffdb\001" +
    "\002\000\042\003\uffec\007\uffec\012\uffec\017\uffec\020\uffec" +
    "\024\uffec\025\uffec\027\uffec\041\uffec\045\uffec\050\uffec\051" +
    "\uffec\052\uffec\053\uffec\054\uffec\056\uffec\001\002\000\042" +
    "\003\uffed\007\uffed\012\uffed\017\uffed\020\uffed\024\uffed\025" +
    "\uffed\027\uffed\041\uffed\045\uffed\050\uffed\051\uffed\052\uffed" +
    "\053\uffed\054\uffed\056\uffed\001\002\000\042\003\uffee\007" +
    "\uffee\012\uffee\017\uffee\020\uffee\024\uffee\025\uffee\027\uffee" +
    "\041\uffee\045\uffee\050\uffee\051\uffee\052\uffee\053\uffee\054" +
    "\uffee\056\uffee\001\002\000\006\042\ufff0\046\ufff0\001\002" +
    "\000\006\026\224\043\ufff5\001\002\000\040\003\051\007" +
    "\046\012\056\017\041\020\053\024\042\025\050\027\054" +
    "\041\055\045\057\050\040\052\044\053\043\054\045\056" +
    "\052\001\002\000\026\030\065\032\063\033\066\034\061" +
    "\035\062\036\064\037\072\040\067\043\ufff4\047\071\001" +
    "\002\000\004\043\231\001\002\000\004\043\230\001\002" +
    "\000\010\002\ufffc\003\ufffc\004\ufffc\001\002\000\010\003" +
    "\ufff7\051\ufff7\056\ufff7\001\002\000\010\003\ufff8\051\ufff8" +
    "\056\ufff8\001\002\000\010\003\016\051\236\056\021\001" +
    "\002\000\004\043\235\001\002\000\010\002\ufffb\003\ufffb" +
    "\004\ufffb\001\002\000\004\043\237\001\002\000\010\002" +
    "\ufffd\003\ufffd\004\ufffd\001\002\000\004\002\000\001\002" +
    "\000\010\002\ufffe\003\ufffe\004\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\237\000\010\003\004\004\003\005\006\001\001\000" +
    "\004\005\240\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\232\007\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\017\007\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\225\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\025\011\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\221\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\046\001" +
    "\001\000\006\012\211\014\212\001\001\000\004\012\201" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\172\001\001\000\002" +
    "\001\001\000\004\012\170\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\147\001\001\000\004\012\146" +
    "\001\001\000\004\012\145\001\001\000\002\001\001\000" +
    "\004\012\057\001\001\000\002\001\001\000\004\012\115" +
    "\001\001\000\004\012\114\001\001\000\004\012\113\001" +
    "\001\000\004\012\112\001\001\000\004\012\111\001\001" +
    "\000\004\012\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\077\013\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\077" +
    "\013\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\123\001\001\000\002" +
    "\001\001\000\004\012\131\001\001\000\002\001\001\000" +
    "\004\012\125\001\001\000\004\017\127\001\001\000\004" +
    "\012\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\136\001\001\000\004\012\144\001\001\000\002\001" +
    "\001\000\004\012\140\001\001\000\004\017\142\001\001" +
    "\000\004\012\143\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\153\016\151\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\154\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\161\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\077\013\166\001\001\000" +
    "\004\012\165\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\174\001\001\000\002\001\001" +
    "\000\004\012\176\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\206" +
    "\001\001\000\004\012\204\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\213\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\224\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\225" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CoolParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CoolParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CoolParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CoolParser$actions {

 

    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }

  private final CoolParser parser;

  /** Constructor */
  CUP$CoolParser$actions(CoolParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CoolParser$do_action(
    int                        CUP$CoolParser$act_num,
    java_cup.runtime.lr_parser CUP$CoolParser$parser,
    java.util.Stack            CUP$CoolParser$stack,
    int                        CUP$CoolParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CoolParser$result;

      /* select the action based on the action number */
      switch (CUP$CoolParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression ::= error 
            {
              Expression RESULT = null;
		  
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*expression*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression ::= WHILE expression error expression POOL 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		  
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*expression*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression ::= WHILE expression LOOP expression error 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		  
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*expression*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression ::= BOOL_CONST 
            {
              Expression RESULT = null;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = (new bool_const(curr_lineno(), b)); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*expression*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expression ::= STR_CONST 
            {
              Expression RESULT = null;
		AbstractSymbol s = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = (new string_const(curr_lineno(), s)); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*expression*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expression ::= INT_CONST 
            {
              Expression RESULT = null;
		AbstractSymbol i = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = (new int_const(curr_lineno(), i)); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*expression*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression ::= OBJECTID 
            {
              Expression RESULT = null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = (new object(curr_lineno(), o)); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*expression*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression ::= LPAREN expression RPAREN 
            {
              Expression RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = e; 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*expression*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression ::= NOT expression 
            {
              Expression RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = (new comp(curr_lineno(), e)); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*expression*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression ::= expression EQ expression 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = (new eq(curr_lineno(), e1, e2)); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*expression*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression ::= expression LE expression 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = (new leq(curr_lineno(), e1, e2)); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*expression*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= expression LT expression 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = (new lt(curr_lineno(), e1, e2)); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*expression*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= NEG expression 
            {
              Expression RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = (new neg(curr_lineno(), e)); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*expression*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= expression DIV expression 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = (new divide(curr_lineno(), e1, e2)); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*expression*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= expression MINUS expression 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = (new sub(curr_lineno(), e1, e2)); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*expression*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= expression MULT expression 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = (new mul(curr_lineno(), e1, e2)); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*expression*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= expression PLUS expression 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = (new plus(curr_lineno(), e1, e2)); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*expression*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= ISVOID expression 
            {
              Expression RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = (new isvoid(curr_lineno(), e)); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*expression*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= NEW TYPEID 
            {
              Expression RESULT = null;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = (new new_(curr_lineno(), t)); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*expression*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= CASE expression OF cases ESAC 
            {
              Expression RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Cases cs = (Cases)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = (new typcase(curr_lineno(), e, cs)); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*expression*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= LET OBJECTID COLON TYPEID ASSIGN expression ins 
            {
              Expression RESULT = null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = (new let(curr_lineno(), o, t, e, i)); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*expression*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= LET OBJECTID COLON TYPEID ins 
            {
              Expression RESULT = null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = (new let(curr_lineno(), o, t, new no_expr(curr_lineno()), i)); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*expression*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= LET OBJECTID COLON TYPEID ASSIGN expression IN expression 
            {
              Expression RESULT = null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = (new let(curr_lineno(), o, t, e1, e2)); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*expression*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= LET OBJECTID COLON TYPEID IN expression 
            {
              Expression RESULT = null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = (new let(curr_lineno(), o, t, new no_expr(curr_lineno()), e)); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*expression*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= LBRACE expression_list_block RBRACE 
            {
              Expression RESULT = null;
		Expressions el = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = (new block(curr_lineno(), el)); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*expression*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= WHILE expression LOOP expression POOL 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = (new loop(curr_lineno(), e1, e2)); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*expression*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= IF expression THEN expression ELSE expression FI 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression e3 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = (new cond(curr_lineno(), e1, e2, e3)); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*expression*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= OBJECTID LPAREN expression_list RPAREN 
            {
              Expression RESULT = null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expressions el = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = (new dispatch(curr_lineno(),
                new object(curr_lineno(), AbstractTable.idtable.addString("self")),
                o, el)); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*expression*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression ::= expression AT TYPEID DOT OBJECTID LPAREN expression_list RPAREN 
            {
              Expression RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-7)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expressions el = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = (new static_dispatch(curr_lineno(), e, t, o, el)); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*expression*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= expression DOT OBJECTID LPAREN expression_list RPAREN 
            {
              Expression RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expressions el = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = (new dispatch(curr_lineno(), e, o, el)); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*expression*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= OBJECTID ASSIGN expression 
            {
              Expression RESULT = null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = (new assign(curr_lineno(), o, e)); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*expression*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ins ::= COMMA OBJECTID COLON TYPEID ASSIGN expression ins 
            {
              Expression RESULT = null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = (new let(curr_lineno(), o, t, e, i)); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(13/*ins*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ins ::= COMMA OBJECTID COLON TYPEID ins 
            {
              Expression RESULT = null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = (new let(curr_lineno(), o, t, new no_expr(curr_lineno()), i)); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(13/*ins*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ins ::= COMMA OBJECTID COLON TYPEID ASSIGN expression IN expression 
            {
              Expression RESULT = null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = (new let(curr_lineno(), o, t, e1, e2)); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(13/*ins*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ins ::= COMMA OBJECTID COLON TYPEID IN expression 
            {
              Expression RESULT = null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = (new let(curr_lineno(), o, t, new no_expr(curr_lineno()), e)); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(13/*ins*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // case ::= OBJECTID COLON TYPEID DARROW expression SEMI 
            {
              Case RESULT = null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = (new branch(curr_lineno(), o, t, e)); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(12/*case*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // cases ::= cases case 
            {
              Cases RESULT = null;
		Cases cs = (Cases)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		Case c = (Case)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = cs.appendElement(c); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(11/*cases*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // cases ::= case 
            {
              Cases RESULT = null;
		Case c = (Case)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = (new Cases(curr_lineno())).appendElement(c); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(11/*cases*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expression_list ::= expression_list COMMA expression 
            {
              Expressions RESULT = null;
		Expressions el = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = el.appendElement(e); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(9/*expression_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expression_list ::= expression 
            {
              Expressions RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = (new Expressions(curr_lineno())).appendElement(e); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(9/*expression_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expression_list ::= 
            {
              Expressions RESULT = null;
		 RESULT = (new Expressions(curr_lineno())); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(9/*expression_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expression_list_block ::= expression_list_block error SEMI 
            {
              Expressions RESULT = null;
		Expressions el = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expression_list_block*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expression_list_block ::= expression_list_block expression SEMI 
            {
              Expressions RESULT = null;
		Expressions el = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = el.appendElement(e); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expression_list_block*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expression_list_block ::= expression SEMI 
            {
              Expressions RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = (new Expressions(curr_lineno())).appendElement(e); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*expression_list_block*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // formal ::= OBJECTID COLON TYPEID 
            {
              formalc RESULT = null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = (new formalc(curr_lineno(), o, n)); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(7/*formal*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // formal_list ::= formal_list COMMA formal 
            {
              Formals RESULT = null;
		Formals fl = (Formals)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		formalc f = (formalc)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = fl.appendElement(f); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(6/*formal_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // formal_list ::= formal 
            {
              Formals RESULT = null;
		formalc f = (formalc)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = (new Formals(curr_lineno())).appendElement(f); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(6/*formal_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // formal_list ::= 
            {
              Formals RESULT = null;
		 RESULT = (new Formals(curr_lineno())); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(6/*formal_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // feature ::= error 
            {
              Feature RESULT = null;
		 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(5/*feature*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // feature ::= OBJECTID COLON TYPEID ASSIGN expression 
            {
              Feature RESULT = null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = (new attr(curr_lineno(), o, n, e)); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(5/*feature*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // feature ::= OBJECTID COLON TYPEID 
            {
              Feature RESULT = null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = (new attr(curr_lineno(), o, n, new
                  no_expr(curr_lineno()))); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(5/*feature*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // feature ::= OBJECTID LPAREN formal_list RPAREN COLON TYPEID LBRACE expression RBRACE 
            {
              Feature RESULT = null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-8)).value;
		Formals fl = (Formals)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).value;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = (new method(curr_lineno(), o, fl, n, e)); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(5/*feature*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // feature_list ::= feature_list feature SEMI 
            {
              Features RESULT = null;
		Features fl = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Feature f = (Feature)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = fl.appendElement(f); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(4/*feature_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // feature_list ::= feature SEMI 
            {
              Features RESULT = null;
		Feature f = (Feature)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = (new Features(curr_lineno())).appendElement(f); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(4/*feature_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // class ::= error 
            {
              class_c RESULT = null;
		 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(3/*class*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // class ::= CLASS TYPEID INHERITS TYPEID LBRACE RBRACE SEMI 
            {
              class_c RESULT = null;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		AbstractSymbol p = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		 RESULT = new class_c(curr_lineno(), n, p,
                new Features(curr_lineno()), curr_filename()); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(3/*class*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // class ::= CLASS TYPEID LBRACE RBRACE SEMI 
            {
              class_c RESULT = null;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		 RESULT = new class_c(curr_lineno(), n, 
		                   AbstractTable.idtable.addString("Object"), 
				   new Features(curr_lineno()), curr_filename()); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(3/*class*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // class ::= CLASS TYPEID INHERITS TYPEID LBRACE feature_list RBRACE SEMI 
            {
              class_c RESULT = null;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).value;
		AbstractSymbol p = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Features f = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		 RESULT = new class_c(curr_lineno(), n, p, f, curr_filename()); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(3/*class*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // class ::= CLASS TYPEID LBRACE feature_list RBRACE SEMI 
            {
              class_c RESULT = null;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Features f = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new class_c(curr_lineno(), n, 
		                   AbstractTable.idtable.addString("Object"), 
				   f, curr_filename()); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(3/*class*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // class_list ::= class_list class 
            {
              Classes RESULT = null;
		Classes cl = (Classes)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		class_c c = (class_c)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = cl.appendElement(c); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(2/*class_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // class_list ::= class 
            {
              Classes RESULT = null;
		class_c c = (class_c)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = (new Classes(curr_lineno())).appendElement(c); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(2/*class_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT = null;
		programc start_val = (programc)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		RESULT = start_val;
              CUP$CoolParser$result = new java_cup.runtime.Symbol(0/*$START*/, RESULT);
            }
          /* ACCEPT */
          CUP$CoolParser$parser.done_parsing();
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= class_list 
            {
              programc RESULT = null;
		Classes cl = (Classes)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new programc(curr_lineno(), cl); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(1/*program*/, RESULT);
            }
          return CUP$CoolParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

